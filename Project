Data Scientist Role Play: Profiling and Analyzing the Yelp Dataset Coursera Worksheet

This is a 2-part assignment. In the first part, you are asked a series of questions that will help you profile and understand the data just like a data scientist would. For this first part of the assignment, you will be assessed both on the correctness of your findings, as well as the code you used to arrive at your answer. You will be graded on how easy your code is to read, so remember to use proper formatting and comments where necessary.

In the second part of the assignment, you are asked to come up with your own inferences and analysis of the data for a particular research question you want to answer. You will be required to prepare the dataset for the analysis you choose to do. As with the first part, you will be graded, in part, on how easy your code is to read, so use proper formatting and comments to illustrate and communicate your intent as required.

For both parts of this assignment, use this "worksheet." It provides all the questions you are being asked, and your job will be to transfer your answers and SQL coding where indicated into this worksheet so that your peers can review your work. You should be able to use any Text Editor (Windows Notepad, Apple TextEdit, Notepad ++, Sublime Text, etc.) to copy and paste your answers. If you are going to use Word or some other page layout application, just be careful to make sure your answers and code are lined appropriately.
In this case, you may want to save as a PDF to ensure your formatting remains intact for you reviewer.



Part 1: Yelp Dataset Profiling and Understanding

	
i. Attribute table = 10.000
ii. Business table = 10.000
iii. Category table = 10.000
iv. Checkin table =10.000
v. elite_years table = 10.000
vi. friend table = 10.000
vii. hours table = 10.000
viii. photo table =  10.000
ix. review table = 10.000
x. tip table = 10.000
xi. user table = 10.000
	



2. Find the total distinct records by either the foreign key or primary key for each table. If two foreign keys are listed in the table, please specify which foreign key.

i. Business = Primary key: 10.000
ii. Hours = Primary key: 1562
iii. Category = Primary key:2643
iv. Attribute = Primary key: 1115
v. Review = (id=10.000), (business_id=8090), (user_id=9581)
vi. Checkin = Primary key: 493
vii. Photo = (Primary key: 10.000), (Foreign key: business_id =  6493)
viii. Tip = (ForeingKey: user_id: 537), (ForeingKey: user_id = 3979)
ix. User = Primary key: 10.000
x. Friend = Primary key: 11
xi. Elite_years = Primary key: 2780

Note: Primary Keys are denoted in the ER-Diagram with a yellow key icon.	

Sample Code: SELECT  COUNT(DISTINCT user_id)
FROM elite_years 


3. Are there any columns with null values in the Users table? Indicate "yes," or "no."

	Answer: No
	
	
	SQL code used to arrive at answer:
SELECT  *
FROM user
WHERE id AND name AND review_count AND yelping_since AND useful 
AND funny AND cool AND fans AND average_stars AND compliment_hot AND compliment_more 
AND compliment_profile AND compliment_cute AND compliment_list AND 
compliment_note AND compliment_plain AND compliment_cool AND compliment_funny 
AND compliment_writer AND compliment_photos IS NULL ;




	
	

	
4. For each table and column listed below, display the smallest (minimum), largest (maximum), and average (mean) value for the following fields:

	i. Table: Review, Column: Stars
	
		min:	1	max:	5	avg: 3.7082
		
	
	ii. Table: Business, Column: Stars
	
		min:	1	max:	5	avg: 3.6549
		
	
	iii. Table: Tip, Column: Likes
	
		min:	0	max:	2	avg: 0.0144	
	
	iv. Table: Checkin, Column: Count
	
		min:	1	max:	53	avg: 1.9414
		
	
	v. Table: User, Column: Review_count
	
		min:	0	max:	2000	avg: 24.2995

Sample Code:
 SELECT MIN(review_count), max(review_count), AVG(review_count) 
FROM user

5. List the cities with the most reviews in descending order:

	SQL code used to arrive at answer:
SELECT city, review_count, COUNT(review_count) AS most_reviews
FROM business
GROUP BY city
ORDER BY most_reviews DESC
	
	Copy and Paste the Result Below:
	

	
6. Find the distribution of star ratings to the business in the following cities:

i. Avon

SQL code used to arrive at answer:

SELECT city, stars, review_count
FROM business
WHERE city = 'Avon'
ORDER BY stars
 ASC


Copy and Paste the Resulting Table Below (2 columns â€“ star rating and count):



ii. Beachwood

SQL code used to arrive at answer:
SELECT city, stars, review_count
FROM business
WHERE city = 'Beachwood'
ORDER BY stars
 ASC


Copy and Paste the Resulting Table Below (2 columns â€“ star rating and count):
		


7. Find the top 3 users based on their total number of reviews:
		
	SQL code used to arrive at answer:
	SELECT name, review_count
      FROM user
      ORDER BY review_count DESC

		
	Copy and Paste the Result Below:



8. Does posing more reviews correlate with more fans?

	Please explain your findings and interpretation of the results:

According to the results below, having more reviews does not correlate with having more fans. For example Sara, second name with most reviews, has fewer fans than Mimi who is number 9 in the review_count column.  
	


	
9. Are there more reviews with the word "love" or with the word "hate" in them?

	Answer:

	
	SQL code used to arrive at answer:
 
SELECT id, stars, text, COUNT(text) AS textlove
FROM review
WHERE text LIKE '%love%'

 
SELECT id, stars, text, COUNT(text) AS text1
FROM review
WHERE text LIKE '%hate%'


	
	
10. Find the top 10 users with the most fans:

	SQL code used to arrive at answer:
SELECT  name, fans 
FROM user 
GROUP BY fans 
ORDER BY fans DESC

	
	Copy and Paste the Result Below:


	
		

Part 2: Inferences and Analysis

1. Pick one city and category of your choice and group the businesses in that city or category by their overall star rating. Compare the businesses with 2-3 stars to the businesses with 4-5 stars and answer the following questions. Include your code.
	
i. Do the two groups you chose to analyze have a different distribution of hours?

For the category and city I chose there are no star reviews below 3.5. But to answer the first question, we have a yes; meaning the restaurants with the lower ratings have a 6:00 to 22:00 schedule, and the 5.0 ratings are for places with a 11:00 to 20:00 schedule. 





Sample code: 
SELECT business.city, business.stars, business.name, category.category, hours.hours
FROM business
INNER JOIN category ON business.id = category.business_id
    INNER JOIN hours ON category.business_id = hours.business_id
    WHERE city = 'Charlotte' AND category = 'Restaurants'


ii. Do the two groups you chose to analyze have a different number of reviews?

Yes, the 3.5 star restaurants have more reviews than the 5.0 star restaurants. 
 SAMPLE CODE
SELECT business.city, business.stars, business.name, category.category, hours.hours, business.review_count
FROM business
INNER JOIN category ON business.id = category.business_id
    INNER JOIN hours ON category.business_id = hours.business_id
    WHERE city = 'Charlotte' AND category = 'Restaurants'
        
         
iii. Are you able to infer anything from the location data provided between these two groups? Explain.

There are only 2 places in the column city = Charlotte and column category = restaurants. So the 2 locations are the same. 

SQL code used for analysis:
SELECT business.city, business.stars, business.name, category.category
, business.address
FROM business
INNER JOIN category ON business.id = category.business_id
    INNER JOIN hours ON category.business_id = hours.business_id
    WHERE city = 'Charlotte' AND category = 'Restaurants'

		
		
2. Group business based on the ones that are open and the ones that are closed. What differences can you find between the ones that are still open and the ones that are closed? List at least two differences and the SQL code you used to arrive at your answer.


		
i. Difference 1:
The place with the lowest review is open. 
         
         
ii. Difference 2:
The place with the highest review is closed.  
         
         
SQL code used for analysis:

SELECT business.city, business.stars, business.name, category.category, hours.hours
, business.is_open
FROM business
INNER JOIN category ON business.id = category.business_id
    INNER JOIN hours ON category.business_id = hours.business_id
    WHERE city = 'Charlotte' AND category = 'Restaurants'

	
	
3. For this last part of your analysis, you are going to choose the type of analysis you want to conduct on the Yelp dataset and are going to prepare the data for analysis.

Ideas for analysis include: Parsing out keywords and business attributes for sentiment analysis, clustering businesses to find commonalities or anomalies between them, predicting the overall star rating for a business, predicting the number of fans a user will have, and so on. These are just a few examples to get you started, so feel free to be creative and come up with your own problem you want to solve. Provide answers, in-line, to all of the following:
	
i. Indicate the type of analysis you chose to do:
        Finding correlation between the business stars and the stars given in the reviews.  
         
ii. Write 1-2 brief paragraphs on the type of data you will need for your analysis and why you chose that data:
                           
            It seemed an interesting correlation to see, if the stars given in both places correlated to each other. High number of stars for the business and high number of stars for the reviews.

For this query I need to identify the business name, business stars and then join that with review stars from the review column.        
iii. Output of your finished dataset:
With this query I was able to see how strongly business stars and review stars are correlated, meaning that good and popular businesses are getting good reviews, and business with low business stars do similarly in the opposite sense. 

Screenshot of best 10 businesses, ordered by business stars. 



Screenshot of worst 10 businesses, ordered by business stars. 




         
         
iv. Provide the SQL code you used to create your final dataset:

SELECT business.name, business.stars AS businessstars, review.stars AS reviewstars
FROM business
INNER JOIN review ON business.id = review.business_id
 
ORDER BY business.stars DESC

